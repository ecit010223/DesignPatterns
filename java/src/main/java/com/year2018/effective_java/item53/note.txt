接口优先于反射机制
反射机制允许一个类使用另一个类，即使当前者被编译的时候后者还根本不存在，然而，这种能力也要付出代价：
1.丧失了编译时类型检查的好处，包括异常检查。如果程序企图用反射方式调用不存在的或者不可访问的方法，在运行
  时它将会失败，除非采取了特别的预防措施；
2.执行反射访问所需要的代码非常笨拙和冗长，编写这样的代码非常乏味，阅读起来也很困难。
3.性能损失，反射方法调用比普通方法调用慢了许多。
核心反射机制最初是为了基于组件的应用创建工具而设计。这类工具通常要根据需要装载类，并且用反射功能找出它们
支持哪些方法和构造器。这些工具允许用户交互式地构建出访问这些类的应用程序，但是所产生出来的这些应用程序能
够以正常的方式访问这些类，而不是以反射方式。
一些复杂的应用需要使用反射机制。这些示例中包括类浏览器、对象监视器、代码分析工具、解释型的内嵌式系统。
如果只是以非常有限的形式使用反射机制，虽然也要付出少许代价，但是可以获得许多好处。对于有些程序，它们必须
用到在编译时无法获取的类，但是在编译时存在适当的接口或者超类，通过它们可以引用这个类。如果是这种情况，就
可以以反射方式创建实例，然后通过它们的接口或者超类，以正常的方式访问这些实例。如果适当的构造器不带参数，
甚至根本不需要使用java.lang.reflect包；Class.newInstance方法就已经提供了所需的功能。
