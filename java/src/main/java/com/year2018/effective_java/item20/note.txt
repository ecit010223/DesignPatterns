类层次优于标签类
见根目录下的Figure.java标签类有许多缺点，它们中充斥着样板代码，包括枚举声明、标签域以及条件语句。由于多
个实现乱七八糟地挤在了单个类中，破坏了可读性。内存占用也增加了，因为实例承担着属于其它风格的不相差的域，
域不能做成final的，除非构造器初始化了不相关的域，产生了更多的样板代码。构造器必须不借助编译器，来设置标
签域，并初始化正确的数据域：如果初始化了错误的域，程序就会在运行时失败。无法给标签来添加风格，除非可以
修改它的源文件。如果一定要添加风格，就必须记得给每个条件语句都添加一个条件，否则类就会在运行时失败。
最后，实例的数据类型没有提供任何关于其风格的线索。一句话，标签类过于冗长，容易出错，并且效率低下。
面向对象的语言例如java，就提供了其它更好的方法来定义能表示多种风格对象的单个数据类型：子类型化。
子类型化见hierarchy包
为了将标签类转变成类层次，首先要为标签类中的每个方法都定义一个包含抽象方法的抽象类，这每个方法的行为都依
赖于标签值。在Figure类中，只有一个这样的方法：area。这个抽象类是类层次的根。如果还有其它的方法其行为不依
赖于标签的值，就把这样的方法放在这个类中。同样的，如果所有的方法都用到了某些数据域，就应该把它们放在这个
类中。
接下来，为每种原始标签类都定义根类的具体子类。在每个子类中都包含特定于该类型的数据域。