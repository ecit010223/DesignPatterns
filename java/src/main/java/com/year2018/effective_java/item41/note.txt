慎用重载
对于重载方法的选择是静态的，对于被覆盖方法的选择是动态的。
调用哪个重载方法是在编译时决定的，选择被覆盖方法是在运行时决定的。
到底怎样才算胡乱使用重载机制呢？这个问题仍有争议，安全而保守的策略是，永远不要导出两个具有相同数目的重载
方法。如果方法使用可变变参数，保守的策略是根据不要重载它。例如，ObjectOutputStream类，对于每个基本类型，
以及几种引用类型，它的write方法都有一种变形，这些变形方法并不是重载write方法，而是具有诸如writeBoolean(
boolean)、writeInt(int)和writeLong(long)这样的签名。
对于构造器，没有选择使用不同名称的机会，一个类的多个构造器总是重载的，在许多情况下，可以选择导出静态工厂，
而不是构造器。
如果对于“任何一组给定的实际参数将应用于哪个重载方法上”始终非常清楚，那么，导出多个具有相同参数数目的重载
方法就不可能使程序员感到混淆。如果对于每一对重载方法，至少有一个对应的参数在两个重载方法中具有“根本不同”
的类型，就属于这种情况。“根本不同”是指：不可能把一种类型的实例转换为另一种类型。

