覆盖equals时请遵守通用约定
equals方法的许多覆盖方式会导致错误，并且后果非常严重，最容易避免这类问题的方法就是不覆盖equals方法，在这
种情况下，类的每个实例都只与它自身相等。
如果类具有自己特有的“逻辑相等“概念（不同于对象等同的概念），而且超类还没有覆盖equals以实现期望的行为，
这时就需要覆盖equals方法。这通常属于“值类（value class）”的情形，值类仅仅是一个表示值的类，例如Integer
或者Date，程序员在利用equals方法来比较值对象的引用时，希望知道它们在逻辑上是否相等，而不是想了解是否指向
同一个对象。
有一种“值类”不需要覆盖equals方法，即用实例受控（见item01）确保“每个值至多只存在一个对象”的类。枚举类型
就属于这种类。对于这样的类而言，逻辑相同与对象等同是一回事，因此Object的equals方法等再于逻辑意义的上的
equals方法。
在覆盖equals方法的时候，必须遵守如下的规定：
1.自反性：对于任何非null的引用x，x.equals(x)必须返回true
2.对称性：对于任何非null的引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true.
  见CaseInsensitiveString.java
3.传递性：对于任何非null的引用值x、y和z，如果x.equals(y)返回true，并且y.equals(z)也返回true，那么
  x.equals(z)也返回true。
  见Point.java、ColorPoint.java
  ColorPoint.java的可解决吗？事实上，这是面向对象语言中关于等价关系的一个基本问题：无法在扩展可实例化的
  类的同时，即增加新的值组件，同时又保留equals约定，除非愿意放弃面向对象的抽象所带来的优势。
4.一致性：对于任何非null的引用值x和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用
  x.equals(y)就会一致地返回true，或者一致地返回false.
虽然没有一种令人满意的方法既扩展不可实例化的类，又增加值组件，但还是有一种不错的权宜之计。根据item16，
复合优先于继承。不再让ColorPoint扩展Point，而是在ColorPoint中加入一个私有的Point域，以及一个公有的视
图方法，此方法返回一个与该有色点处在相同位置的普通Point对象。（见composition包）
结合如上所有要求，得出以下实现高质量equals方法的诀窍：
1.使用==操作符检查“参数是否为这个对象的引用”。如果是，则返回true。这只不过是一种性能优化，如果比较操作
  有可能很昂贵，就值得这么做。
2.使用instanceof操作符检查“参数是否为正确的类型”。如果不是，则返回false，一般说来，所谓“正确的类型”是
  指equals方法所在的那个类。在些情况下，是指该类所实现的某个接口
3.把参数转换成正确的类型。因为转换之前进行过instanceof测试，所以确保会成功。
4.对于该类中的每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配。如果这些测试全部成功，返回true，
  否则返回false.
