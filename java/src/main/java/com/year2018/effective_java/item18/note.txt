接口优于抽象类
现有的类可以以实现新的接口形式，很容易被更新。
接口是定义mixin（混合类型）的理想选择。mixin是指这类除了实现它的“基本类型”之外，还可以实现这个mixin类型，
以表明它提供了某些可供选择的行为。
接口允许我们构造非层次结构的类型构架。
通过item16中介绍的包装类模式，接口使得安全地增强类的功能成为可能。如果使用抽象类来定义类型，那么程序员
除了使用继承的手段来增加功能，没有其它的选择，这样得到的类与包装类相比，功能更差，也更加脆弱。
通过对导出的每个重要接口都提供一个抽象的骨架实现类，把接口和抽象类的优点结合起来。接口的作用仍然是定义
类型，但是骨架实现类接管了所有与接口实现相关的工作。
如果预置的类无法扩展骨架实现类，这个类始终可以手工实现这个接口。此外，骨架实现类仍然能够有助于接口的实
现。实现了这个接口的类可以把对于接口方法的调用，转发到一个内部私有类的实例上，这个内部私有类扩展了骨架
实现类，这种方法被称为模拟多重继承
因为骨架实现类是为了继承的目的而设计，所以应该遵从从item17中介绍的所有关于设计和文档的指导原则。
骨架实现上有个小小的不同，就是简单实现，简单实现就像个骨架实现，这是因为它实现了接口，并且是为了继承而
设计的，但是区别在于它不是抽象的：它是最简单的可能的有效实现，可以原封不动的使用，也可以看情况将它子类
化。
使用抽象类来定义允许多个实现的类型，与使用接口相比有一个明显的优势：抽象类的演变比接口的演变要容易得多。
如果在后续的发行版本中，希望在抽象类中增加新的方法，始终可以增加具体方法，它包含合理的默认实现，然后，
该抽象类的所有实现都将提供这个新的方法。
接口通常是定义允许多个实现的类型的最佳途径，这条规则有个例外，即当演变的容易性比灵活性和功能更为重要的
时候。在这种情况下，应该使用抽象类来定义类型，但前提是必须理解并且可以接受这些局限笥。如果你导出了一个
重要的接口，就应该坚决考虑同时提供骨架实现类，最后，应该尽可能谨慎地设计所有的公有接口，并通过编写多个
实现来对它们进行全面的测试。
