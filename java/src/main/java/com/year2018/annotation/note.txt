1.什么是注解（Annotation）
Annotation（注解）是一个接口，程序可以通过反射来获取指定程序元素的Annotation对象，然后通过Annotation对象
来获取注解里面的元数据。
Annotation（注解）是JDK5.0及以后版本引入的，它可以用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检
查。从某些方面看，Annotation就像修饰符一样被使用，并应用于包、类 型、构造方法、方法、成员变量、参数、本地
变量的声明中，这些信息被存储在Annotation的“name=value”结构对中。
Annotation的成员在Annotation类型中以无参数的方法的形式被声明，其方法名和返回值定义了该成员的名字和类型。
在此有一个特定的默认语法：允许声明任何Annotation成员的默认值（一个Annotation可以将name=value对作为没有定
义默认值的Annotation成员的值，当然也可以使用name=value对来覆盖其它成员默认值）。这一点有些近似类的继承特
性，父类的构造函数可以作为子类的默认构造函数，但是也可以被子类覆盖。
Annotation能被用来为某个程序元素（类、方法、成员变量等）关联任何的信息。需要注意的是，这里存在着一个基本
的规则：Annotation不能影响程序代码的执行，无论增加、删除Annotation，代码都始终如一的执行；另外，尽管一些
Annotation通过java的反射api方法在运行时被访问，而java语言解释器在工作时忽略了这些Annotation，正是由于
java虚拟机忽略了Annotation，导致了Annotation类型在代码中是“不起作用”的；只有通过某种配套的工具才会对
Annotation类型中的信息进行访问和处理。
2.什么是metadata（元数据）
元数据从metadata一词译来，就是“关于数据的数据”的意思。
元数据的功能作用有很多，比如：你可能用过javadoc的注释自动生成文档，这就是元数据功能的一种。总的来说，元数
据可以用来创建文档，跟踪代码的依赖性，执行编译时格式检查，代替已有的配置文件。如果要对于元数据的作用进行
分类，目前还没有明确的定义，不过我们可以根据它所起的作用，大致可分为三类：
(1)编写文档：通过代码里标识的元数据生成文档;
(2)代码分析：通过代码里标识的元数据对代码进行分析;
(3)编译检查：通过代码里标识的元数据让编译器能实现基本的编译检查。
在java中元数据以标签的形式存在于java代码中，元数据标签的存在并不影响程序代码的编译和执行，它只是被用来生
成其它的文件或针在运行时知道被运行代码的描述信息。
综上所述：
(1)元数据以标签的形式存在于java代码中;
(2)元数据描述的信息是类型安全的，即元数据内部的字段都是有明确类型的;
(3)元数据需要编译器之外的工具额外的处理用来生成其它的程序部件;
(4)元数据可以只存在于java源代码级别，也可以存在于编译之后的Class文件内部。
3.注解处理器
如果没有用来读取注解的方法和工作，那么注解也就不会比注释更有用处了。使用注解的过程中，很重要的一部分就是
创建与使用注解处理器。Java SE5扩展了反射机制的API，以帮助程序员快速的构造自定义注解处理器。
4.注解处理器类库(java.lang.reflect.AnnotatedElement)
java使用Annotation接口来代表程序元素前面的注解，该接口是所有Annotation类型的父接口，除此之外，java在
java.lang.reflect包下新增了AnnotatedElement接口，该接口代表程序中可以接受注解的程序元素，该接口主要有如
下几个实现类：
(1)Class：类定义
(2)Constructor：构造器定义
(3)Field：类的成员变量定义
(4)Method：类的方法定义
(5)Package：类的包定义
java.lang.reflect包下主要包含一些实现反射功能的工具类，实际上，java.lang.reflect包所有提供的反射API扩充
了读取运行时Annotation信息的能力。当一个Annotation类型被定义为运行时的Annotation后，该注解才能是运行时可
见，当class文件被装载时被保存在class文件中的Annotation才会被虚拟机读取。
AnnotatedElement接口是所有程序元素（Class、Method和Constructor）的父接口，所以程序通过反射获取了某个类
的AnnotatedElement对象之后，程序就可以调用该对象的如下四个个方法来访问Annotation信息：
(1)方法1：<T extends Annotation> T getAnnotation(Class<T> annotationClass): 返回该程序元素上存在的、
指定类型的注解，如果该类型注解不存在，则返回null。
(2)方法2：Annotation[] getAnnotations():返回该程序元素上存在的所有注解。
(3)方法3：boolean isAnnotationPresent(Class<?extends Annotation> annotationClass):判断该程序元素上是
否包含指定类型的注解，存在则返回true，否则返回false.
(4)方法4：Annotation[] getDeclaredAnnotations()：返回直接存在于此元素上的所有注释。与此接口中的其他方法
不同，该方法将忽略继承的注释如果没有注释直接存在于此元素上，则返回长度为零的一个数组）。该方法的调用者可
以随意修改返回的数组；这不会对其他调用者返回的数组产生任何影响。


