面向对象六大原则
1.单一职责原则
两个完全不一样的功能不应该放在一个类中，一个类中应该是一组相关性很高的函数、数据的封装。
2.开闭原则
软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是，对于修改是封闭的。
当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。
当然，在现实开发中，只通过继承的方式来升级、维护原有系统只是一个理想化的愿景，因此，在实际的开发过程中，
修改原有代码、扩展代码往往是同时存在的。
3.里氏替换原则
里氏替换原则就是依赖于继承、多态两大特性。
里氏替换原则简单来说就是，所有引用基类的地方必须能透明地使用其子类的对象。通俗的讲，只要父类能出现的地
方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本不需要知道是父类还是子类。但是，
反过来就不行了，有子类出现的地方，父类未必就能适应。最终总结就两字：抽象。
里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性，在OPP当中，继承的优缺点都相当明显。
优点如下：
(1)代码重用，减少创建类的成本，每个子类都拥有父类的方法和属性；
(2)子类与父类基本相似，但又与父类有所区别；
(3)提高代码的可扩展性。
继承的缺点：
(1)继承是侵入性的，只要继承就必须拥有父类的所有属性和方法；
(2)可能造成子类代码冗余、灵活性降低，因为子类必须拥有父类的属性的方法。
4.依赖倒置原则
(1)高层模块不应该依赖低层模块，两者都应该依赖其抽象；
(2)抽象不应该依赖细节；
(3)细节应该依赖抽象。
抽象指接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或继承抽象类而产生的类就是细节，
其特点是，可以直接被实例化，也就是可以加上一个关键字new产生一个对象。高层模块就是调用端，低层模块就是
具体实现类。依赖倒置原则在java中的表现就是：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，
其依赖关系是通过接口或抽象类产生的。其一句话可以概括为：面向接口编程，或者说面向抽象编程。
5.接口